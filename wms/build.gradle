plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

ext {
    junitVersion = "5.9.2"
}

repositories {
    mavenCentral()
}

javafx {
    version = "17.0.9"
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation('org.apache.logging.log4j:log4j-api:2.21.0')
    implementation('org.apache.logging.log4j:log4j-core:2.21.0')
    implementation('org.hibernate:hibernate-core:5.6.15.Final')
    implementation 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    implementation 'com.mysql:mysql-connector-j:8.1.0'
    implementation group: 'de.jensd', name: 'fontawesomefx-fontawesome', version: '4.7.0-9.1.2'

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation 'org.testfx:testfx-core:4.0.17'
    testImplementation 'org.testfx:testfx-junit5:4.0.17'
    testImplementation 'com.h2database:h2:2.2.224'
    testImplementation 'org.loadui:testFx:3.1.2'
    testImplementation 'org.assertj:assertj-core:3.24.2'
}

test {
    useJUnitPlatform()
    exclude '**/ApplicationControllerTest.class'
    exclude '**/HomeControllerTest.class'
    exclude '**/LoginControllerTest.class'
    exclude '**/RegistrationControllerTest.class'
}

// Define the main class and application name
def mainClassPath = 'bg.tuvarna.sit.MainApp'
def appName = 'MyJavaFXApp'

// Task to create the jar with all dependencies
task customJar(type: Jar) {
    manifest {
        attributes 'Main-Class': mainClassPath
    }
    archiveBaseName.set(appName)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

// Task to create the .exe installer using JPackage
task createExe(type: Exec, dependsOn: customJar) {
    doFirst {
        // Define output directory for the installer
        def outputDir = file("$buildDir/jpackage")
        mkdir(outputDir)

        // Define JPackage command line parameters
        commandLine 'jpackage', '--type', 'exe',
                '--input', "$buildDir/libs",
                '--name', appName,
                '--main-jar', "${appName}-${version}.jar", // Use the correct JAR file name
                '--main-class', mainClassPath,
                '--dest', outputDir.absolutePath
        // If you have additional resources like icons, you can specify them here
        // '--icon', 'path/to/icon.ico'

        // For additional JPackage options, you can add them here
    }
}

// Make createExe task depends on customJar task
tasks.build.dependsOn createExe


mainClassName = 'bg.tuvarna.sit.MainApp'